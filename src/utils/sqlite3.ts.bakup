import {
  type Database,
  verbose,
} from 'sqlite3'

// const TAG = '[sqlite3]'
let database: Promise<Database>

export const getSqlite3 = (filename: string) => {
  return database ??= new Promise<Database>((resolve, reject) => {
    const db = new (verbose().Database)(filename, error => {
      if (error) {
        // console.log(TAG, 'initialize failed :(')
        // console.log(TAG, error)
        reject(error)
      } else {
        // console.log(TAG, 'initialize success :)')
        // console.log(TAG, filename)
        resolve(db)
      }
    })
  })
}

export const get(sql, params = []) {
  return new Promise((resolve, reject) => {
    this.db.get(sql, params, (err, result) => {
      if (err) {
        console.log('Error running sql: ' + sql)
        console.log(err)
        reject(err)
      } else {
        resolve(result)
      }
    })
  })
}

export const all(sql, params = []) {
  return new Promise((resolve, reject) => {
    this.db.all(sql, params, (err, rows) => {
      if (err) {
        console.log('Error running sql: ' + sql)
        console.log(err)
        reject(err)
      } else {
        resolve(rows)
      }
    })
  })
}
